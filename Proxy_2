<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <title>Proxy_2</title>
    <script>




        // WRAPPER
        // добавление дефолтных значений тем ключам, которые не определены в объекте (или отсутствуют)

        const withDefaultValue = (target, defaultValue = 0) => {
            return new Proxy(target, {
                get: (obj, prop) => (prop in obj) ? obj[prop] : defaultValue
            })
        };

        const position = withDefaultValue({
            x: 5,
            y: 10
        }, 0);

        position.z;

        /*
        0
        */



        // Hidden properties
        // Функция-обертка, которая скрывает свойства, которое я указываю:
        // эти свойства будут в объекте, но к ним нельзя будет получить доступ
        // с помощью оператора точка, key in obj, Object.keys(obj) или через цикл for(let key in obj)

        const withHiddenPropperties = (target, prefix = '_') => {
            return new Proxy(target, {
                has: (obj, prop) => (prop in obj) && (!prop.startWith(prefix)),
                ownKeys: (obj) => Reflect.ownKeys(obj).filter(p => !p.startWith(prefix)),
                get: (obj, prop, receiver) => (prop in receiver) ? obj[prop] : void 0
            })
        };

        const data = withHiddenPropperties({
            name: 'Ivan',
            age: 34,
            _id: 22111
        });

        data.name; // ==> Ivan
        data._id; // ==> undefined




        // Optimization

        const userData = [
            { id: 124, name: 'Vladilen', job: 'Fullstack', age: 25 },
            { id: 725, name: 'Vladilen', job: 'Fullstack', age: 25 },
            { id: 3, name: 'Vladilen', job: 'Fullstack', age: 25 },
            { id: 100, name: 'Vladilen', job: 'Fullstack', age: 25 },
        ]

        // допустим, нужно найти элемент массива по его индексу:

        // стандартный подход - через метод массива find,
        // но этот метод не оптимален, так как при каждом запросе,
        // он проходит каждый раз по всему массива, снова и снова

        userData.find(user => user.id === 3);
        // ==>  { id: 3, name: 'Vladilen', job: 'Fullstack', age: 25 }

        // Оптимальным способом оптимизации является создание карты массива,
        // где создан специальный индекс равный user.id и возвращающий нужный элемент
        // При этом способе поиск по массиву осуществляется только один, первый раз
        
        const IndexedArray = new Proxy(Array, {
            construct(target, [args]) {
                // создание карты всего массива
                const index = {};
                args.forEach(element => {
                    return index[element.id] = element;
                });


                return new Proxy(new target(...args), {
                    get(arr, prop) {
                        switch (prop) {
                            case 'push': return (item) => {
                                index[index.id] = item;
                                arr[prop].call(arr, item);
                            };

                            case 'findById': return id => index[id];

                            default: return arr[prop]
                        }
                    }
                })
            }
        });

        const users = new IndexedArray([
            { id: 124, name: 'Vladilen', job: 'Fullstack', age: 25 },
            { id: 725, name: 'Vladilen', job: 'Fullstack', age: 25 },
            { id: 3, name: 'Vladilen', job: 'Fullstack', age: 25 },
            { id: 100, name: 'Vladilen', job: 'Fullstack', age: 25 },
        ]);

        users.findById(3); //> { id: 3, name: 'Vladilen', job: 'Fullstack', age: 25 }


    </script>
</head>

<body>
    <p>Proxy_2</p>
</body>

</html>
